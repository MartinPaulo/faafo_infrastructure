# http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#heat-template-version
heat_template_version: 2014-10-16


description: |
  A template to bring up the faafo application as an autoscaling one


parameters:

  key_name:
    type: string
    description: Name of an existing KeyPair to enable SSH access to the instances
    constraints:
      - custom_constraint: nova.keypair
        description: Must already exist on your cloud

  instance_type:
    type: string
    description: The flavour the webserver is to run on
    default: m2.xsmall
    constraints:
      - custom_constraint: nova.flavor
        description:  Must be a valid flavour provided by your cloud provider.

  image_id:
    type: string
    description: ID of the image to use for the instance to be created
    default: 7313d773-3cd9-4e69-98d2-eff1f9797480
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid image on your cloud
resources:

  api:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "For services that run on an api node"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"

  worker:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "For services that run on a worker node"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"

  controller:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "For services that run on a worker node"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "5672"
          ToPort: "5672"
          CidrIp: "0.0.0.0/0"
          SourceSecurityGroupName: { get_resource: worker }

  services:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "For DB and AMPQ services only"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "5672"
          ToPort: "5672"
          CidrIp: "0.0.0.0/0"
          SourceSecurityGroupName: { get_resource: worker }
        -
          IpProtocol: "tcp"
          FromPort: "5672"
          ToPort: "5672"
          CidrIp: "0.0.0.0/0"
          SourceSecurityGroupName: { get_resource: api }
        -
          IpProtocol: "tcp"
          FromPort: "3306"
          ToPort: "3306"
          CidrIp: "0.0.0.0/0"
          SourceSecurityGroupName: { get_resource: api }

  app-services:
    # The database and the AMPQ services run on this machine.
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: services}
      user_data_format: RAW
      user_data: |
        #!/usr/bin/env bash
        curl -L -s http://git.openstack.org/cgit/stackforge/faafo/plain/contrib/install.sh | bash -s -- \
        -i database -i messaging

  instance_api_1:
    # The web interface is available here
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: api}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            curl -L -s http://git.openstack.org/cgit/stackforge/faafo/plain/contrib/install.sh | bash -s -- \
            -i faafo -r api -m 'amqp://guest:guest@%(services_ip)s:5672/' \
            -d 'mysql://faafo:password@%(services_ip)s:3306/faafo'
          params:
            services_ip: { get_attr: [app-services, first_address] }

  instance_api_2:
    # The web interface is available here as well
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: api}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            curl -L -s http://git.openstack.org/cgit/stackforge/faafo/plain/contrib/install.sh | bash -s -- \
            -i faafo -r api -m 'amqp://guest:guest@%(services_ip)s:5672/' \
            -d 'mysql://faafo:password@%(services_ip)s:3306/faafo'
          params:
            services_ip: { get_attr: [app-services, first_address] }

  instance_worker_1:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: worker}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            curl -L -s http://git.openstack.org/cgit/stackforge/faafo/plain/contrib/install.sh | bash -s -- \
            -i faafo -r worker -e 'http://%(api_1_ip)s' -m 'amqp://guest:guest@%(services_ip)s:5672/'
          params:
            api_1_ip: { get_attr: [instance_api_1, first_address] }
            services_ip: { get_attr: [app-services, first_address] }

  instance_worker_2:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: worker}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            curl -L -s http://git.openstack.org/cgit/stackforge/faafo/plain/contrib/install.sh | bash -s -- \
            -i faafo -r worker -e 'http://%(api_1_ip)s' -m 'amqp://guest:guest@%(services_ip)s:5672/'
          params:
            api_1_ip: { get_attr: [instance_api_1, first_address] }
            services_ip: { get_attr: [app-services, first_address] }

  instance_worker_3:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: worker}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            curl -L -s http://git.openstack.org/cgit/stackforge/faafo/plain/contrib/install.sh | bash -s -- \
            -i faafo -r worker -e 'http://%(api_1_ip)s' -m 'amqp://guest:guest@%(services_ip)s:5672/'
          params:
            api_1_ip: { get_attr: [instance_api_1, first_address] }
            services_ip: { get_attr: [app-services, first_address] }

outputs:

  api_1_url:
    description: URL for api_1 server
    value:
      list_join: ['', ['http://', get_attr: [instance_api_1, first_address]]]

  api_2_url:
    description: URL for api_2 server
    value:
      list_join: ['', ['http://', get_attr: [instance_api_2, first_address]]]

  services_ip:
    description: The db and ampq services
    value:
      list_join: ['', ['The db and ampq services: ', get_attr: [app-services, first_address]]]

  worker_1:
    description: Just one of the workers
    value:
      list_join: ['', ['Worker 1: ', get_attr: [instance_worker_1, first_address]]]

  worker_2:
    description: Just one of the workers
    value:
      list_join: ['', ['Worker 2: ', get_attr: [instance_worker_2, first_address]]]

  worker_3:
    description: Just one of the workers
    value:
      list_join: ['', ['Worker 3: ', get_attr: [instance_worker_3, first_address]]]