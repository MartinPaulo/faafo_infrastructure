heat_template_version: 2014-10-16


description: |
  A template to bring up the faafo application as an all in one


parameters:

  key_name:
    type: string
    description: Name of an existing KeyPair to enable SSH access to the instances
    constraints:
      - custom_constraint: nova.keypair
        description: Must already exist on your cloud

  instance_type:
    type: string
    description: The flavour the application is to use
    constraints:
      - custom_constraint: nova.flavor
        description:  Must be a valid flavour provided by your cloud provider.

  image_id:
    type: string
    description: ID of the image to use for the instance to be created
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid image on your cloud

  faafo_source:
    type: string
    description: The http location of the faafo application install script
    default: https://raw.githubusercontent.com/MartinPaulo/son_of_faafo/master/contrib/install.sh

resources:

  faafo_sg:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "For the all in one server"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"

  faafo:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: faafo_sg}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            curl -L -s faafo_installer | bash -s -- \
            -i faafo -i messaging -r api -r worker -r demo
            wc_notify --data-binary '{"status": "SUCCESS"}'
          params:
            wc_notify: { get_attr: ['faafo_wait_handle', 'curl_cli'] }
            faafo_installer: { get_param: faafo_source }

  faafo_wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    depends_on: faafo
    properties:
      handle: { get_resource: faafo_wait_handle }
      count: 1
      # we'll give it 10 minutes
      timeout: 600

outputs:

  faafo_ip:
    description: The faafo url
    value:
      list_join: ['', ['Faafo is at: http://', get_attr: [faafo, first_address]]]