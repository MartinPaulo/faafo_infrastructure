# http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#heat-template-version
heat_template_version: 2014-10-16

# This simply recreates the libcloud code in chapter 3, but with the heat engine
# One important difference is that the code in chapter 3 assembles the resources sequentially. Heat builds
# it in parallel, where possible.
# I don't recreate the network stuff as the cloud available to me doesn't have that functionality

description: |
  A template to bring up the faafo application as per chapter 3's code


parameters:

  key_name:
    type: string
    description: Name of an existing KeyPair to enable SSH access to the instances
    constraints:
      - custom_constraint: nova.keypair
        description: Must already exist on your cloud

  instance_type:
    type: string
    description: The flavour the application is to use
    constraints:
      - custom_constraint: nova.flavor
        description:  Must be a valid flavour provided by your cloud provider.

  image_id:
    type: string
    description: ID of the image to use for the instance to be created
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid image on your cloud

  faafo_source:
    type: string
    description: The http location of the faafo application install script
    default: https://raw.githubusercontent.com/MartinPaulo/son_of_faafo/master/contrib/install.sh


resources:

  api:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "For services that run on an api node"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"

  worker:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "For services that run on a worker node"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"

  controller:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "For services that run on a worker node"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "5672"
          ToPort: "5672"
          CidrIp: "0.0.0.0/0"
          # SourceSecurityGroupName: { get_resource: worker }

  services:
    type: "AWS::EC2::SecurityGroup"
    properties:
      GroupDescription: "For DB and AMPQ services only"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "5672"
          ToPort: "5672"
          CidrIp: "0.0.0.0/0"
          # SourceSecurityGroupName: { get_resource: worker }
        -
          IpProtocol: "tcp"
          FromPort: "5672"
          ToPort: "5672"
          CidrIp: "0.0.0.0/0"
          # SourceSecurityGroupName: { get_resource: api }
        -
          IpProtocol: "tcp"
          FromPort: "3306"
          ToPort: "3306"
          CidrIp: "0.0.0.0/0"
          # SourceSecurityGroupName: { get_resource: api }

  app-services:
    # The database and the AMPQ services run on this machine.
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: services}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            curl -L -s faafo_installer | bash -s -- \
            -i database -i messaging
            wc_notify --data-binary '{"status": "SUCCESS"}'
          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
            faafo_installer: { get_param: faafo_source }

  api_init:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/usr/bin/env bash
            curl -L -s faafo_installer | bash -s -- \
            -i faafo -r api -m 'amqp://guest:guest@services_ip:5672/' \
            -d 'mysql://faafo:password@services_ip:3306/faafo'
            wc_notify --data-binary '{"status": "SUCCESS"}'
          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
            services_ip: { get_attr: [app-services, first_address] }
            faafo_installer: { get_param: faafo_source }

  api_init_userdata:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: api_init}

  instance_api_1:
    # The web interface is available here
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: api}
      user_data_format: RAW
      user_data: { get_resource: api_init_userdata }

  instance_api_2:
    # The web interface is available here as well
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: api}
      user_data_format: RAW
      user_data: { get_resource: api_init_userdata }

  worker_init:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/usr/bin/env bash
            curl -L -s faafo_installer | bash -s -- \
            -i faafo -r worker -e 'http://api_1_ip' -m 'amqp://guest:guest@services_ip:5672/'
            wc_notify --data-binary '{"status": "SUCCESS"}'
          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
            api_1_ip: { get_attr: [instance_api_1, first_address] }
            services_ip: { get_attr: [app-services, first_address] }
            faafo_installer: { get_param: faafo_source }

  worker_init_userdata:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: worker_init}

  instance_worker_1:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: worker}
      user_data_format: RAW
      user_data: { get_resource: worker_init_userdata }

  instance_worker_2:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - { get_resource: worker}
      user_data_format: RAW
      user_data: { get_resource: worker_init_userdata }

  instance_worker_3:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      security_groups:
        - {get_resource: worker}
      user_data_format: RAW
      user_data: { get_resource: worker_init_userdata }

  wait_handle:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::WaitConditionHandle
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::WaitCondition
    type: OS::Heat::WaitCondition
    depends_on: [app-services, instance_api_1, instance_api_2, instance_worker_1, instance_worker_2, instance_worker_3]
    properties:
      handle: { get_resource: wait_handle }
      # we will have all 6 servers clock in when they are finished installing their software
      count: 6
      # we'll give it 12 minutes
      timeout: 720


outputs:

  api_1_url:
    description: URL for api_1 server
    value:
      list_join: ['', ['http://', get_attr: [instance_api_1, first_address]]]

  api_2_url:
    description: URL for api_2 server
    value:
      list_join: ['', ['http://', get_attr: [instance_api_2, first_address]]]

  services_ip:
    description: The db and ampq services
    value:
      list_join: ['', ['Are at: ', get_attr: [app-services, first_address]]]

  worker_1:
    description: Just one of the workers
    value:
      list_join: ['', ['Worker 1 is at: ', get_attr: [instance_worker_1, first_address]]]

  worker_2:
    description: Just one of the workers
    value:
      list_join: ['', ['Worker 2 is at: ', get_attr: [instance_worker_2, first_address]]]

  worker_3:
    description: Just one of the workers
    value:
      list_join: ['', ['Worker 3 is at: ', get_attr: [instance_worker_3, first_address]]]